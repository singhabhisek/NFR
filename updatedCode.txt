// Export to Excel button click event handler
$('#export-excel').on('click', function() {
    // Retrieve the application name and release ID from the dropdowns
    var applicationName = $('#application-dropdown').val().trim(); // Assuming dropdown with ID `application-dropdown`
    var releaseId = $('#release-dropdown').val().trim(); // Assuming dropdown with ID `release-dropdown`

    // Get the current date and time
    var currentDateTime = new Date();
    var formattedDateTime = currentDateTime.toISOString().slice(0, 19).replace(/[-T:]/g, ''); // Format: YYYYMMDDHHMMSS

    // Create a new workbook and worksheet
    var wb = XLSX.utils.book_new();
    var ws_data = [];

    // Get table headers and determine which columns to exclude
    var headers = $('#records-table th');
    var headerRow = [];
    var excludeIndices = [];

    headers.each(function(index) {
        var headerText = $(this).text().trim();
        if (headerText === 'ID' || headerText === 'Actions') {
            excludeIndices.push(index); // Collect indices to exclude
        } else {
            headerRow.push({ v: headerText, s: { font: { bold: true } } }); // Bold header text
        }
    });
    ws_data.push(headerRow);

    // Get table rows and exclude the specified columns
    $('#records-table tbody tr').each(function() {
        var rowData = [];
        $(this).find('td').each(function(index) {
            if (!excludeIndices.includes(index)) {
                rowData.push($(this).text().trim());
            }
        });
        ws_data.push(rowData);
    });

    // Convert the data to worksheet and append to the workbook
    var ws = XLSX.utils.aoa_to_sheet(ws_data);
    XLSX.utils.book_append_sheet(wb, ws, 'Records');

    // Construct the filename using the application name, release ID, and current datetime
    var fileName = applicationName + '_' + releaseId + '_' + formattedDateTime + '.xlsx';

    // Write the workbook to a file
    XLSX.writeFile(wb, fileName);
});


------------------------------------------


document.getElementById('clear-cookies-btn').addEventListener('click', function() {
                const cookieName = 'main_search';  // Replace with the actual cookie name

                fetch('/clear_searches', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ cookie_name: cookieName })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        // Clear the list in the modal
                        document.getElementById('recent-searches-list').innerHTML = '';
                        alert('Recent searches cleared successfully.');
                    } else {
                        alert('Failed to clear recent searches.');
                    }
                });
            });



@app.route('/clear_searches', methods=['POST'])
def clear_searches():
    data = request.json
    cookie_name = data.get('cookie_name')

    if not cookie_name:
        return jsonify({'status': 'error', 'message': 'No cookie name provided'}), 400

    response = make_response(jsonify({'status': 'success'}))
    response.set_cookie(cookie_name, '', expires=0)  # Clear the cookie by setting it to an empty value with an expired date
    return response




---------------------------



data: $('#edit-form').serialize(),
                    success: function(data) {
                        if (data.success) {
                            // Show success alert
                            showAlert('success', 'Record updated successfully.');
                            // Fetch the updated record
                            $.ajax({
                                url: '/get_record',
                                type: 'POST',
                                data: { Id: $('#edit-id').val() },
                                success: function(recordData) {
                                    // Update the corresponding row in the data table
                                    var row = table.row(function(idx, data, node) {
                                        return data[0] === recordData.Id; // Find the row by record ID
                                    });
                                    if (row.any()) {
                                        // Update only the specific row data in the DataTable
                                            row.data([
                                                recordData.Id,
                                                recordData.applicationName,
                                                recordData.releaseID,
                                                recordData.businessScenario,
                                                recordData.transactionName,
                                                recordData.SLA,
                                                recordData.TPS,
                                                '<button class="btn btn-primary edit-btn" data-id="' + recordData.Id + '" title="Edit"><i class="fa fa-edit"></i></button>' +
                                                '<button class="btn btn-danger delete-btn" data-id="' + recordData.Id + '" title="Delete"><i class="fa fa-trash-alt"></i></button>'
                                            ]).draw(false);  // Use draw(false) to avoid full table redraw

                                    }
                                    $('#editModal').modal('hide');
                                }


--------------------------




---------------------------
def process_excel_file(filepath):
    error_log = []
    total_records = 0
    inserted_records = 0
    updated_records = 0
    passed_records = 0
    failed_records = 0

    # Define mandatory columns
    mandatory_columns = ['ApplicationName', 'ReleaseID', 'BusinessScenario', 'TransactionName', 'SLA', 'TPS', 'Comments']

    try:
        wb = load_workbook(filename=filepath)
        ws = wb.active
    except Exception as load_error:
        error_log.append(f"Error loading Excel file: {load_error}")
        app.logger.error(f"Error loading Excel file: {load_error}", extra={'func': 'PROCESS_EXCEL_FILE'})
        return error_log, None

    # Extract headers from the first row
    headers = [cell.value for cell in ws[1]]

    # Check if mandatory columns are present
    missing_columns = [col for col in mandatory_columns if col not in headers]
    if missing_columns:
        error_message = f"Missing mandatory columns: {', '.join(missing_columns)}"
        error_log.append(error_message)
        app.logger.error(error_message, extra={'func': 'PROCESS_EXCEL_FILE'})
        raise Exception(error_message)

    # Map headers to their indexes
    header_index_map = {header: index for index, header in enumerate(headers)}

    current_user = session.get('user', 'defaultUser')
    current_time = "2024-06-06 10:10:10"

    with get_db_connection() as conn:
        for row_number, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
            # Extract data using header indices
            applicationName = row[header_index_map.get('ApplicationName', -1)]

            # Skip rows where ApplicationName is None (row with borders only)
            if not applicationName:
                continue

            releaseID = row[header_index_map['ReleaseID']]
            businessScenario = row[header_index_map['BusinessScenario']]
            transactionName = row[header_index_map['TransactionName']]
            SLA = row[header_index_map['SLA']]
            TPS = row[header_index_map['TPS']]
            comments = row[header_index_map['Comments']]

            total_records += 1

            # Validate SLA and TPS
            if SLA is None or TPS is None:
                failed_records += 1
                error_message = f"Error processing row {row_number}: SLA and TPS must have values"
                error_log.append(error_message)
                app.logger.error(error_message, extra={'func': 'PROCESS_EXCEL_FILE'})
                continue

            try:
                SLA = float(SLA)
                TPS = float(TPS)
            except ValueError:
                failed_records += 1
                error_message = f"Error processing row {row_number}: SLA and TPS must be valid numbers"
                error_log.append(error_message)
                app.logger.error(error_message, extra={'func': 'PROCESS_EXCEL_FILE'})
                continue

            try:
                # Check if the record exists
                cursor = conn.execute('''
                    SELECT * FROM NFRDetails
                    WHERE applicationName = ? AND releaseID = ? AND transactionName = ?
                ''', (applicationName, releaseID, transactionName))

                existing_record = cursor.fetchone()
                if existing_record:
                    # Update the record
                    conn.execute('''
                        UPDATE NFRDetails
                        SET businessScenario = ?, SLA = ?, TPS = ?, comments = ?, modifiedBy = ?, modified_date = ?
                        WHERE applicationName = ? AND releaseID = ? AND transactionName = ?
                    ''', (businessScenario, SLA, TPS, comments, current_user, current_time, applicationName, releaseID, transactionName))
                    updated_records += 1
                else:
                    # Insert the record
                    conn.execute('''
                        INSERT INTO NFRDetails (applicationName, releaseID, businessScenario, transactionName, SLA, TPS, comments, createdBy, modifiedBy, created_date, modified_date)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (applicationName, releaseID, businessScenario, transactionName, SLA, TPS, comments, current_user, current_user, current_time, current_time))
                    inserted_records += 1

                passed_records += 1
            except Exception as e:
                failed_records += 1
                error_message = f"Error processing row {row_number}: {e}"
                error_log.append(error_message)
                app.logger.error(error_message, extra={'func': 'PROCESS_EXCEL_FILE'})

        conn.commit()

    summary = {
        'total': total_records,
        'inserted': inserted_records,
        'updated': updated_records,
        'passed': passed_records,
        'failed': failed_records
    }
    return error_log, summary


